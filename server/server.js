"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const node_1 = require("vscode-languageserver/node");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const connection = node_1.createConnection(node_1.ProposedFeatures.all);
const documents = new node_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
connection.onInitialize((params) => {
    return {
        capabilities: {
            completionProvider: {
                resolveProvider: true
            }
        }
    };
});
const API_URL = "https://api-inference.huggingface.co/models/EleutherAI/gpt-neo-2.7B";
// eslint-disable-next-line @typescript-eslint/naming-convention
const headers = { "Authorization": "Bearer <API_TOKEN>" };
connection.onCompletion((params) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    let text = (_a = documents.get(params.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.getText();
    if (text === undefined) {
        return [];
    }
    const tok = text.split(" ")[-1];
    const lines = text.split("\n");
    const lineLen = lines.length - 1;
    const len = lines[lineLen].length - 1;
    let response = yield axios_1.default.post(String(API_URL), { "inputs": text }, { headers: headers });
    let completion = response.data[0].generated_text.split("\n")[lineLen];
    completion = completion.slice(len);
    return [
        {
            label: completion,
            insertText: completion,
            kind: node_1.CompletionItemKind.Text,
            data: 1
        }
    ];
}));
connection.onCompletionResolve((item) => {
    if (item.data === 1) {
        item.detail = "Autogenerated completion using deep learninng.";
        item.documentation = "";
    }
    return item;
});
documents.listen(connection);
connection.listen();
//# sourceMappingURL=server.js.map